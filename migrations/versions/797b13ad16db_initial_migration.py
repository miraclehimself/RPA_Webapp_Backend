"""Initial Migration

Revision ID: 797b13ad16db
Revises: 
Create Date: 2022-05-26 23:58:22.427402

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '797b13ad16db'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('function_group',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('group_name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('description'),
    sa.UniqueConstraint('group_name'),
    schema='rpa-test'
    )
    op.create_table('functions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('group_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('function_name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=120), nullable=False),
    sa.Column('input', postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())), nullable=True),
    sa.Column('output', postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())), nullable=True),
    sa.Column('options', postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('description'),
    sa.UniqueConstraint('function_name'),
    schema='rpa-test'
    )
    op.create_table('machine',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('mac', sa.String(length=20), nullable=False),
    sa.Column('mac_name', sa.String(length=40), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mac'),
    schema='rpa-test'
    )
    op.create_table('temp_user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('fullname', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('otp', sa.String(length=6), nullable=False),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('fullname', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('fullname'),
    schema='rpa-test'
    )
    op.create_table('workspace',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('url', sa.String(length=80), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url'),
    schema='rpa-test'
    )
    op.create_table('TWSU',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER',
                name='workspacerole'), nullable=False),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('bots',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('token', sa.String(length=80), nullable=True),
    sa.Column('status', sa.Enum('DISCONNECTED', 'CONNECTED', name='botstatus'), nullable=False),
    sa.Column('type', sa.Enum('DEVELOPMENT', 'PRODUCTION', 'ON_DEMAND', name='bottype'), nullable=False),
    sa.Column('script', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('flows',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('created_by', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('shared_type', sa.Enum('PRIVATE', 'PUBLIC', 'WORKSPACE', name='sharedtype'), nullable=False),
    sa.Column('shared_with', postgresql.ARRAY(postgresql.UUID(as_uuid=True)), nullable=True),
    sa.Column('versions', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['rpa-test.user.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('subscriptions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.Enum('FREE', 'BASIC', 'PREMIUM', name='billingtype'), nullable=False),
    sa.Column('user_limit', sa.Integer(), nullable=False),
    sa.Column('prod_robot', sa.Integer(), nullable=False),
    sa.Column('dev_robot', sa.Integer(), nullable=False),
    sa.Column('on_demand_robot', sa.Integer(), nullable=False),
    sa.Column('period', sa.Enum('MONTHLY', 'YEARLY', name='periodtype'), nullable=False),
    sa.Column('next_pay_date', sa.DateTime(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='statustype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('workspace_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER',
                name='workspacerole', create_type=False), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['rpa-test.user.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('bot_script',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('script', sa.Text(), nullable=True),
    sa.Column('bot_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['bot_id'], ['rpa-test.bots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('flow_data',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=80), nullable=True),
    sa.Column('flow_name', sa.String(length=80), nullable=False),
    sa.Column('flow_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('nodes', postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())), nullable=True),
    sa.Column('link', postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['flow_id'], ['rpa-test.flows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('schedule',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('robot_name', sa.String(length=80), nullable=False),
    sa.Column('robot_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('flow_name', sa.String(length=80), nullable=False),
    sa.Column('flow_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('flow_version', sa.Integer(), nullable=False),
    sa.Column('schedule', sa.Enum('MINUTES', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'ADVANCE', name='scheduletype'), nullable=False),
    sa.Column('cron_expression', sa.String(length=80), nullable=False),
    sa.Column('cron_command', sa.String(length=80), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['flow_id'], ['rpa-test.flows.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['robot_id'], ['rpa-test.bots.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    op.create_table('trigger',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.String(length=120), nullable=False),
    sa.Column('robot_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('flow_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('flow_version', sa.Integer(), nullable=False),
    sa.Column('trigger_type', sa.Enum('FILE_SYSTEM', 'EMAIL', name='triggertype'), nullable=False),
    sa.Column('trigger_item', sa.String(length=80), nullable=False),
    sa.Column('trigger_properties', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('workspace_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['flow_id'], ['rpa-test.flows.id'], ),
    sa.ForeignKeyConstraint(['robot_id'], ['rpa-test.bots.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['rpa-test.workspace.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='rpa-test'
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trigger', schema='rpa-test')
    op.drop_table('schedule', schema='rpa-test')
    op.drop_table('flow_data', schema='rpa-test')
    op.drop_table('bot_script', schema='rpa-test')
    op.drop_table('workspace_users', schema='rpa-test')
    op.drop_table('subscriptions', schema='rpa-test')
    op.drop_table('flows', schema='rpa-test')
    op.drop_table('bots', schema='rpa-test')
    op.drop_table('TWSU', schema='rpa-test')
    op.drop_table('workspace', schema='rpa-test')
    op.drop_table('user', schema='rpa-test')
    op.drop_table('temp_user', schema='rpa-test')
    op.drop_table('machine', schema='rpa-test')
    op.drop_table('functions', schema='rpa-test')
    op.drop_table('function_group', schema='rpa-test')
    # ### end Alembic commands ###
